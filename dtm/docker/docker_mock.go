// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package docker

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DeleteImage provides a mock function for the type MockClient
func (_mock *MockClient) DeleteImage(ctx context.Context, img string) error {
	ret := _mock.Called(ctx, img)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, img)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DeleteImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteImage'
type MockClient_DeleteImage_Call struct {
	*mock.Call
}

// DeleteImage is a helper method to define mock.On call
//   - ctx
//   - img
func (_e *MockClient_Expecter) DeleteImage(ctx interface{}, img interface{}) *MockClient_DeleteImage_Call {
	return &MockClient_DeleteImage_Call{Call: _e.mock.On("DeleteImage", ctx, img)}
}

func (_c *MockClient_DeleteImage_Call) Run(run func(ctx context.Context, img string)) *MockClient_DeleteImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeleteImage_Call) Return(err error) *MockClient_DeleteImage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DeleteImage_Call) RunAndReturn(run func(ctx context.Context, img string) error) *MockClient_DeleteImage_Call {
	_c.Call.Return(run)
	return _c
}

// ListImages provides a mock function for the type MockClient
func (_mock *MockClient) ListImages(ctx context.Context) ([]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ListImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImages'
type MockClient_ListImages_Call struct {
	*mock.Call
}

// ListImages is a helper method to define mock.On call
//   - ctx
func (_e *MockClient_Expecter) ListImages(ctx interface{}) *MockClient_ListImages_Call {
	return &MockClient_ListImages_Call{Call: _e.mock.On("ListImages", ctx)}
}

func (_c *MockClient_ListImages_Call) Run(run func(ctx context.Context)) *MockClient_ListImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_ListImages_Call) Return(strings []string, err error) *MockClient_ListImages_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockClient_ListImages_Call) RunAndReturn(run func(ctx context.Context) ([]string, error)) *MockClient_ListImages_Call {
	_c.Call.Return(run)
	return _c
}
